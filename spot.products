\dn
delete from admin.osdescriptions where collection='Example';
delete from admin.oscollection where collection='Example';
delete from admin.oscollections where collection='Example';
delete from admin.collections where collection='Example';
drop schema example cascade;
\q
drop table admin.tags;
CREATE TABLE admin.tags (
    tag                 VARCHAR(50) PRIMARY KEY,
    creationdate        TIMESTAMP,
    updateddate         TIMESTAMP,
    occurence           INTEGER
);
CREATE INDEX idx_updated_tags ON admin.tags (updateddate);
\‡
\q
delete from example.products ;
\q
select * from example.products ;
select identifier from example.products ;
\q
delete from example.products ;
\q
select identifier from example.products ;
\q
\d
SELECT AddGeometryColumn(
    'disasters',
    'footprint',
    '4326',
    'POLYGON',
    2
);
CREATE INDEX footprint_act_idx ON disasters USING GIST (footprint);
CREATE TABLE kmls (
    callid            VARCHAR(4),
    kmlurl            TEXT
);
-- Index on CALLID --
CREATE INDEX callid_kmls_idx ON kmls USING btree (callid);
\d
select * from geometry_columns;
select * from disasters where callid = 322;
select * from disasters where callid = '322';
select * from disasters where callid = '322';
select * from disasters where callid = '322';
GRANT SELECT,INSERT,UPDATE,DELETE ON disasters TO charterng;
select * from disasters where callid = '322';
GRANT SELECT,INSERT,UPDATE,DELETE ON kmls TO charterng;,
GRANT SELECT,INSERT,UPDATE,DELETE ON kmls TO charterng;
GRANT SELECT,INSERT,UPDATE,DELETE ON kmls TO charterng;
select * from disasters where callid = '322';
select * from disasters where callid = '322';
select * from disasters where callid = '322';
select * from disasters where callid = '322';
select * from kmls;
select * from kmls;
select * from disasters where callid = '322';
select * from disasters where callid = '322';
select * from kmls;
\q
\d admin.gazetteer
\dn
\d gazetter
\d gazetter.geoname
\d gazetter.geonames
\d gazeetter.geonames
\d gazeetter.geoname
\d
\dn
\d gazetteer.geoname
select admin1,admin2,admin3,am
;
select admin1,admin2,admin3,admin4 from geoname limit 10;
select admin1,admin2,admin3,admin4 from gazetteer.geoname limit 10;
select searchname, admin1,admin2,admin3,admin4 from gazetteer.geoname limit 10;
select searchname, admin1,admin2,admin3,admin4 from gazetteer.geoname limit 10 where searchname='toulouse';
select searchname, admin1,admin2,admin3,admin4 from gazetteer.geoname where searchname='toulouse';
select searchname, admin1,admin2,admin3,admin4 from gazetteer.geoname where searchname='saintgaudens';
select searchname, admin1,admin2,admin3,admin4 from gazetteer.geoname where searchname='paris';
select admin1,admin2,admin3,admin4 from gazetteer.geoname limit 10;
\q
select * from admin.collections;
\q
select * from admin.history;
\q
\d
\q
\q
select * from admin.osdescriptions;
select * from admin.osdescriptions where collection='Spot';
\q
select * from admin.osdescriptions where collection='Spot';
\q
select * from admin.osdescriptions where collection='Spot';
select * from admin.osdescriptions where collection='Spot';
\q
select * from admin.osdescriptions where collection='Spot';
\q
\q
\d
\q
\d charterng.products
\d spot.products
\q
SELECT count(*) as total FROM spot.products WHERE ST_IsValid(geometry) = 't';
SELECT count(*) as total FROM spot.products WHERE modifieddate > '2014-01-01';
SELECT count(*) as total FROM spot.products WHERE modifieddate > '2014-06-01';
select distinct(modifieddate) from spot.products;
\‡
\q
alter table admin.collections rename column template theme;
alter table admin.collections rename column template as theme;
\h alter
alter table admin.collections rename column template to theme;
\q
select * from admin.tags;
CREATE TABLE admin.users (
    userid              VARCHAR(255) PRIMARY KEY,  -- should be an email adress
    username            VARCHAR(50) NOT NULL,
    password            VARCHAR(50) NOT NULL, -- stored as md5
    registrationdate    TIMESTAMP NOT NULL,
    lastsessionid       VARCHAR(255)
);
\d admin.users
drop table admin.users;
CREATE TABLE admin.users (
    userid              VARCHAR(255) PRIMARY KEY,  -- should be an email adress
    groups              TEXT, -- group names are comma separated
    username            VARCHAR(50) NOT NULL,
    password            VARCHAR(50) NOT NULL, -- stored as md5
    registrationdate    TIMESTAMP NOT NULL,
    lastsessionid       VARCHAR(255)
);
CREATE TABLE admin.rights (
    userid              VARCHAR(255),  -- same as userid column in admin.users table 
    collection          VARCHAR(50) NOT NULL, -- same as collection in admin.collections
    services            TEXT -- serialized json representation of services rights
);
\q
insert into admin.users VALUES ('jerome.gasperi@gmail.com', 'admin,jrom','jrom','f71dbe52628a3f83a77ab494817525c6',now(),NULL);
select * from admin.users
;
insert into admin.users VALUES ('simpleuser@dev.null', NULL,'simpleuser','f71dbe52628a3f83a77ab494817525c6',now(),NULL);
select * from admin.users
;
insert into admin.users VALUES ('simpleuser@dev.null', NULL,'simpleuser','f71dbe52628a3f83a77ab494817525c6',now(),NULL);
drop table admin.rights;
CREATE TABLE admin.rights (
    groupid              VARCHAR(255),  -- group name as stored in admin.users groups column 
    collection          VARCHAR(50) NOT NULL, -- same as collection in admin.collections
    services            TEXT -- serialized json representation of services rights
);
\q
GRANT SELECT,INSERT,UPDATE,DELETE ON admin.rights TO sresto;
GRANT SELECT,INSERT,UPDATE,DELETE ON admin.users TO sresto;
\q
alter table admin.rights rename column services to rights;
\q
select * from admin.rights;
\q
select * from admin.rights;
delete from admin.rights;
\q
select * from admin.rights;
\q
select * from admin.collection
;
select * from admin.collections;
update table admin.collections set status='public' where collection='Spot';
update  admin.collections set status='public' where collection='Spot';
\q
update  admin.collections set status='public' where collection='Spot';
\q
select * from admin.rights;
update  admin.collections set status='public' where collection='Spot';
\q
update  admin.collections set status='public' where collection='Spot';
update  admin.collections set status='public' where collection='Spot';
select * from admin.rights
;
select * from admin.rights
;
select * from admin.rights
;
select * from admin.rights
;
\q
\q
delete from admin.osdescriptions where collection='Example';
delete from admin.collections where collection='Example';
\q
delete from admin.collections where collection='Example';
drop schema Example cascade;
\q
select * from admin.rights;
drop schema Example cascade;
delete from admin.osdescriptions where collection='Example';
delete from admin.collections where collection='Example';
\q
select * from admin.rights;
select * from admin.collections ;
select * from admin.rights;
\q
delete from admin.osdescriptions where collection='Example';
delete from admin.collections where collection='Example';
drop schema Example cascade;
\q
select * from admin.rights;
drop schema Example cascade;
delete from admin.osdescriptions where collection='Example';
delete from admin.collections where collection='Example';
\q
select * from admin.rights;
\q
select * from admin.rights:
;
select * from admin.rights;
\q
SELECT identifier AS "identifier",acquisitiondate AS "startDate",acquisitiondate AS "completionDate",producttype AS "productType",satellite AS "platform",resolution AS "resolution",sensorfamily AS "sensorMode",imageurl AS "quicklook",imageurl AS "thumbnail",identifier AS "archive",modifieddate AS "updated",creationdate AS "published",keywords AS keywords,ST_AsGeoJSON(geometry) AS geometry,Box2D(ST_Transform(geometry, 3857)) AS bbox3857,archivingstation AS "archivingCenter",receivingstation AS "acquisitionStation",cloudcoverpercentage AS "cloudCover",snowcoverpercentage AS "snowCover",qualityquotes AS "qualityQuotes",incidenceangle AS "incidenceAngle",orientationangle AS "orientationAngle",sunazimuth AS "sunAzimuth",sunelevation AS "sunElevation",productid AS "productId" FROM spot.products WHERE ST_intersects(geometry, ST_GeomFromText('POLYGON((1.3767686905914
Apr 14 22:51:34 valinor.local postgres[13491]: [4-2]  43.539268690591,1.3767686905914 43.669611309409,1.5071113094086 43.669611309409,1.5071113094086 43.539268690591,1.3767686905914 43.539268690591))', 4326)) AND keywords?'country:france' AND acquisitiondate >= '2011-01-01T00:00:00' AND acquisitiondate <= '2013-01-01T00:00:00' ORDER BY acquisitiondate DESC LIMIT 50 OFFSET 0
;
SELECT identifier AS "identifier",acquisitiondate AS "startDate",acquisitiondate AS "completionDate",producttype AS "productType",satellite AS "platform",resolution AS "resolution",sensorfamily AS "sensorMode",imageurl AS "quicklook",imageurl AS "thumbnail",identifier AS "archive",modifieddate AS "updated",creationdate AS "published",keywords AS keywords,ST_AsGeoJSON(geometry) AS geometry,Box2D(ST_Transform(geometry, 3857)) AS bbox3857,archivingstation AS "archivingCenter",receivingstation AS "acquisitionStation",cloudcoverpercentage AS "cloudCover",snowcoverpercentage AS "snowCover",qualityquotes AS "qualityQuotes",incidenceangle AS "incidenceAngle",orientationangle AS "orientationAngle",sunazimuth AS "sunAzimuth",sunelevation AS "sunElevation",productid AS "productId" FROM spot.products WHERE ST_intersects(geometry, ST_GeomFromText('POLYGON((1.3767686905914 43.539268690591,1.3767686905914 43.669611309409,1.5071113094086 43.669611309409,1.5071113094086 43.539268690591,1.3767686905914 43.539268690591))', 4326)) AND keywords?'country:france' AND acquisitiondate >= '2011-01-01T00:00:00' AND acquisitiondate <= '2013-01-01T00:00:00' ORDER BY acquisitiondate DESC LIMIT 50 OFFSET 0;
SELECT identifier AS "identifier",acquisitiondate AS "startDate",acquisitiondate AS "completionDate",producttype AS "productType",satellite AS "platform",resolution AS "resolution",sensorfamily AS "sensorMode",imageurl AS "quicklook",imageurl AS "thumbnail",identifier AS "archive",modifieddate AS "updated",creationdate AS "published",keywords AS keywords,ST_AsGeoJSON(geometry) AS geometry,Box2D(ST_Transform(geometry, 3857)) AS bbox3857,archivingstation AS "archivingCenter",receivingstation AS "acquisitionStation",cloudcoverpercentage AS "cloudCover",snowcoverpercentage AS "snowCover",qualityquotes AS "qualityQuotes",incidenceangle AS "incidenceAngle",orientationangle AS "orientationAngle",sunazimuth AS "sunAzimuth",sunelevation AS "sunElevation",productid AS "productId" FROM spot.products WHERE ST_intersects(geometry, ST_GeomFromText('POLYGON((1.3767686905914 43.539268690591,1.3767686905914 43.669611309409,1.5071113094086 43.669611309409,1.5071113094086 43.539268690591,1.3767686905914 43.539268690591))', 4326)) AND keywords?'country:france' AND acquisitiondate >= '2011-01-01T00:00:00' AND acquisitiondate <= '2014-01-01T00:00:00' ORDER BY acquisitiondate DESC LIMIT 50 OFFSET 0;
\q
select * from admin.rights;
\q
select collection from admin.collections;
\q
\d spot.products
UPDATE spot.products SET keywords = keywords || '#mh370 => NULL,#plane => NULL,#malaysianairlines => NULL' WHERE ST_intersects(geometry, ST_GeomFromText('POLYGON((83.3203125 -16.636191878398,56.6015625 -45.089035564831,69.9609375 -57.515822865539,96.328125 -60.064840460104,108.28125 -53.5403073915,114.2578125 -44.840290651398,116.015625 -36.879620605027,102.3046875 -26.115985925334,96.6796875 -14.264383087563,83.3203125 -16.636191878398))', 4326)) AND acquisitiondate > '2014-03-08' AND acquisitiondate < '2014-03-20';
\q
\d
\dn
\q
\dn
\q
\dn
select * from admin.collections;
\q
select * from admin.rights;
insert into admin.rights (groupid, collection, rights) VALUES ('default', 'hydroweb', '{"get":{"search":{"enabled":true},"download":{"enabled":true},"visualize":{"enabled":false}},"post":{"enabled":false},"put":{"enabled":false},"delete":{"enabled":false}}');
select * from admin.rights;
\q
select * from admin.collections ;
select theme from admin.collections ;
select collection,theme from admin.collections ;
update admin.collections set theme='hydre' where collection='hydroweb';
select collection,theme from admin.collections ;
\q
delete from admin.rights where groupid='default';
\q
select * from admin.collections;
\q
delete from admin.osdescriptions where collection='Example';
delete from admin.descriptions where collection='Example';
delete from admin.collections where collection='Example';
drop schema Example cascade;
delete from admin.osdescriptions where collection='Example';
delete from admin.collections where collection='Example';
drop schema Example cascade;
delete from admin.osdescriptions where collection='Example';
delete from admin.collections where collection='Example';
drop schema Example cascade;
delete from admin.osdescriptions where collection='Example';
delete from admin.collections where collection='Example';
drop schema Example cascade;
delete from admin.osdescriptions where collection='Example';
delete from admin.collections where collection='Example';
drop schema Example cascade;
delete from admin.osdescriptions where collection='Example';
delete from admin.collections where collection='Example';
drop schema Example cascade;
\q
md5
;
select md5('toto') from admin.history;
md5
;
\q
INSERT INTO admin.users (userid,groups,username,password) VALUES ('admin','admin','admin',md5('nimda'));
INSERT INTO admin.users (userid,groups,username,password,registrationdate) VALUES ('admin','admin','admin',md5('nimda'), now());
\q
ALTER EXTENSION postgis UPDATE TO "2.1.2";
\q
select keywords from spot.products limit 1;
\d spot.products
select keywords from spot.products limit 1;
select keywords from spot.products limit 10;
\q
select count(*) from admin.spot;
select count(*) from spot.products;
\d spot.products
select avg(cloudcoverpercentage) as moyenne from spot.products;
select count(*) from spot.products;
select avg(cloudcoverpercentage) as moyenne, stdev(cloudcoverpercentage) as stdev from spot.products;
select avg(cloudcoverpercentage) as moyenne, stddev(cloudcoverpercentage) as stdev from spot.products;
select count(*) from spot.products where cloudcoverpercentage < 10;
select count(*) from spot.products where cloudcoverpercentage < 1;
select count(*) from spot.products where cloudcoverpercentage < 0;
select count(*) from spot.products where cloudcoverpercentage = 0;
\q
\dn
select * from admin.users;
\q
select identifier, parentidentifier from products;
\d products
\q
delete from admin.osdescriptions where collection='js';
delete from admin.oscollections where collection='js';
delete from admin.collections where collection='js';
drop schema js cascade;
create schema drop;
drop schema drop;
drop schema js cascade;
delete from admin.oscollections where collection='js';
delete from admin.osdescriptions where collection='js';
delete from admin.oscollections where collection='js';
delete from admin.collections where collection='js';
\q
select * from admin.users
;
update admin.users set groups='admin' where userid='jerome.gasperi@gmail.com';
select * from admin.users
;
\q
select cloudcoverpercentage from spot.products where cloudcoverpercentage < 1;
\q
select * from admin.rights:
;
select * from admin.rights;
\q
\q
select * from admin.users
;
drop admin.users;
drop table admin.users;
CREATE TABLE admin.users (
    userid              VARCHAR(255) PRIMARY KEY,  -- should be an email adress
    groups              TEXT, -- group names are comma separated
    username            VARCHAR(50) NOT NULL,
    password            VARCHAR(50) NOT NULL, -- stored as md5
    registrationdate    TIMESTAMP NOT NULL,
    activationcode      VARCHAR(255) NOT NULL UNIQUE, -- activation code store as md5
    activated           BOOLEAN NOT NULL FALSE,              
    lastsessionid       VARCHAR(255)
);
CREATE TABLE admin.users (
    userid              VARCHAR(255) PRIMARY KEY,  -- should be an email adress
    groups              TEXT, -- group names are comma separated
    username            VARCHAR(50) NOT NULL,
    password            VARCHAR(50) NOT NULL, -- stored as md5
    registrationdate    TIMESTAMP NOT NULL,
    activationcode      VARCHAR(255) NOT NULL UNIQUE, -- activation code store as md5
    activated           BOOLEAN NOT NULL 0,              
    lastsessionid       VARCHAR(255)
);
CREATE TABLE admin.users (
    userid              VARCHAR(255) PRIMARY KEY,  -- should be an email adress
    groups              TEXT, -- group names are comma separated
    username            VARCHAR(50) NOT NULL,
    password            VARCHAR(50) NOT NULL, -- stored as md5
    registrationdate    TIMESTAMP NOT NULL,
    activationcode      VARCHAR(255) NOT NULL UNIQUE, -- activation code store as md5
    activated           BOOLEAN NOT NULL DEFAULT FALSE,              
    lastsessionid       VARCHAR(255)
);
select * from admin.users;
INSERT INTO admin.users (userid,groups,username,password,activationcode,activated,registrationdate) VALUES ('admin','admin','admin',md5('toto'),md5('toto' || now()), TRUE, now());
select * from admin.users;
update admin.users set activated = FALSE;
select * from admin.users;
GRANT SELECT,INSERT,UPDATE,DELETE ON admin.users TO sresto;
select * from admin.users;
delete from admin.users where groups = 'default';
select * from admin.users;
\q
\q
select * from admin.users;
update admin.users set userid = 'jerome.gasperi@gmail.com' where userid = 'admin';
\q
update admin.history set userid = null;
alter table admin.history alter column userid type INTEGER DEFAULT -1;
update admin.history set userid = '-1';
alter table admin.history alter column userid type INTEGER DEFAULT -1;
update admin.history set userid = null;
\h later
\h alter
alter table admin.history alter column userid type INTEGER;
update admin.history set userid = '-1';
alter table admin.history alter column userid type INTEGER;
alter table admin.history alter column userid type INTEGER USING (userid::integer);
alter table admin.history drop column  userid;
alter table admin.history add column userid integer default -1;
select * from admin.history limit 1;
drop table admin.users;
CREATE TABLE admin.users (
    userid              SERIAL PRIMARY KEY,
    email               VARCHAR(255) UNIQUE,  -- should be an email adress
    groups              TEXT, -- group names are comma separated (first one is the main group)
    username            VARCHAR(50) NOT NULL,
    givenname           VARCHAR(255),
    lastname            VARCHAR(255),
    password            VARCHAR(32) NOT NULL, -- stored as md5
    registrationdate    TIMESTAMP NOT NULL,
    activationcode      VARCHAR(255) NOT NULL UNIQUE, -- activation code store as md5
    activated           BOOLEAN NOT NULL DEFAULT FALSE,              
    lastsessionid       VARCHAR(255)
);
CREATE INDEX idx_email_users ON admin.users (email);
GRANT SELECT,INSERT,UPDATE,DELETE ON admin.users TO sresto;
GRANT ALL ON admin.users_userid_seq TO sresto;
select * from admin.users;
update admin.users set groups = 'admin';
\q
select * from users;
select * from admin.users;
\q
select * from admin.history order by gid;
select * from admin.history order by gid;
delete from admin.history;
select * from admin.history order by gid;
select * from admin.history order by gid;
select * from admin.history order by gid;
select * from admin.users;
ELECT userid, email, groups, username, givenname, lastname, password from admin.users WHERE email='jerome.gasperi@gmail.com' AND password='f71dbe52628a3f83a77ab494817525c6' AND activated = TRUE;
SELECT userid, email, groups, username, givenname, lastname, password from admin.users WHERE email='jerome.gasperi@gmail.com' AND password='f71dbe52628a3f83a77ab494817525c6' AND activated = TRUE;
select * from admin.users;
select * from admin.history order by gid;
select * from admin.history order by gid;
select * from admin.history order by gid;
\q
select * from admin.users;
delete from admin.users where userid=1;
select * from admin.users;
select * from admin.users;
select * from admin.users;
delete from admin.users where userid=4;
\q
delete from admin.users where userid=4;
delete from admin.users where userid=5;
\q
\d admin.users
alter table admin.users alter column username drop not null;
select * from admin.users;
delete from admin.users where userid=6; 
select * from admin.users;
select * from admin.users;
delete from admin.users where userid=7; 
select * from admin.users;
select * from admin.users;
delete from admin.users where userid=8; 
select * from admin.users;
select * from admin.users;
update admin.users set groupd='admin' where userid=9;
update admin.users set groups='admin' where userid=9;
delete from admin.users where userid=2;
\q
select * from admin.users;
delete from admin.users where userid=9;
select * from admin.users;
select * from admin.users;
update admin.users set groups='admin' where userid=11;
select * from admin.users;
\q
\d landsat.products
\q
select * from admin.users;
update admin.users set password=md5('TolKien666');
select * from admin.users;
\q
select * from landsat.products;
select * from landsat.products;
\q
\d landsat.products
\d landsat.products
\q
delete from landsat.products ;
\q
select * from admin.collections;
delete from landsat.products ;
\q
delete from landsat.products ;
\q
delete from landsat.products
;
delete from landsat.products
;
\q
delete from landsat.products
;
\q
delete from landsat.products
;
\q
select count(*) from landsat.products;
select count(*) from landsat.products;
select count(*) from landsat.products;
\q
select count(*) from landsat.products;
select count(*) from landsat.products;
select count(*) from landsat.products;
select count(*) from landsat.products;
\q
select * from admin.rights;
\q
select * from admin.rights;
select * from admin.users;
update admin.users set groups='noawaji' where userid=10l
;
update admin.users set groups='noawaji' where userid=10;
select * from admin.users;
select * from admin.rights;
\q
select * from admin.rights;
delete from admin.rights where groupid='default';
delete from admin.rights where groupid='test';
select * from admin.rights;
\q
select * from admin.users
;
\q
\d
select count(*) from landcover;
\d landcover
select * from landcover limit 2;
\q
\dn
\d gazetteer
\q
show server_encoding;
\q
show server_encoding;
\q
select * from admin.collections;
\q
\q
select * from admin.rights;
\q
select * from admin.rights;
select * from admin.users;
\q
\d gazetteer.geoname
\d gazetteer.alternatenames
\d gazetteer.alternatename
select count(*) from alternatename;
select count(*) from gazetteer.alternatename;
select count(*) from gazetteer.alternatename where isolanguage='fr';
select count(*) from gazetteer.alternatename where isolanguage='en';
select count(*) from gazetteer.alternatename where isolanguage='ar';
\q
select * from admin.rights;
\q
insert into admin.rights (groupid, collection, rights) values ('unregistered', 'Spot', '{"download":true}');
select * from admin.rights;
\q
\q
select counn(*) from gazetteer.alternatename where isolanguage is null;
select count(*) from gazetteer.alternatename where isolanguage is null;
DELETE FROM gazetteer.alternatename WHERE isolanguage IS NULL;
\q
select * from gazetteer.geoname where searchname='newyork';
select * from gazetteer.geoname where searchname='newyork' AND country='US';
\d gazetteer.geoname
select name,fclass,admin1 from gazetteer.geoname where searchname='newyork' AND country='US' ;
select name,fclass,admin1 from gazetteer.geoname where searchname='california' AND country='US' ;
select count(*) from gazetteer.geoname where fclass='P' ;
select count(*) from gazetteer.geoname;
select name,fclass,admin1 from gazetteer.geoname where fclass='P' AND country='US' AND searchname='newyork' ;
select name,fclass,fcode,admin1 from gazetteer.geoname where fclass='P' AND country='US' AND searchname='newyork' ;
select name,fclass,fcode,admin1,population from gazetteer.geoname where fclass='P' AND country='US' AND searchname='newyork' ;
select name,fclass,fcode,admin1,population from gazetteer.geoname where country='US' AND searchname='newyork' ;
select name,fclass,fcode,admin1,population from gazetteer.geoname where fclass='P' AND country='US' AND searchname='newyork' ;
select name,fclass,fcode,admin1,population from gazetteer.geoname where fclass='P' AND country='US' AND name='New York' ;
select name,fclass,fcode,admin1,population from gazetteer.geoname where fclass='P' AND searchname='paris' ;
select name,fclass,fcode,admin1,country,population from gazetteer.geoname where fclass='P' AND searchname='paris' ;
CREATE INDEX idx_fclass_country ON gazetteer.geoname (fclass);
select name,fclass,fcode,admin1,country,population from gazetteer.geoname where searchname LIKE 'cagire%';
select name,fclass,fcode,admin1,country,population from gazetteer.geoname where searchname LIKE '%cagire%';
select name,fclass,fcode,admin1,country,population from gazetteer.geoname where searchname = 'montblanc';
select name,fclass,fcode,admin1,country,population from gazetteer.geoname where searchname = 'montblanc' and country='FR';
drop index idx_geoname_searchname;
\d gazetteer.geoname
drop index idx_geoname_searchname;
drop gazetteer.index idx_geoname_searchname;
drop index gazetteer.index idx_geoname_searchname;
drop index gazetteer.idx_geoname_searchname;
UPDATE gazetteer.geoname SET searchname = lower(replace(asciiname, ' ', '-'));
CREATE INDEX idx_geoname_searchname ON gazetteer.geoname (searchname);
select name,fclass,fcode,admin1,country,population from gazetteer.geoname where searchname = 'montblanc' and country='FR';
select name,fclass,fcode,admin1,country,population from gazetteer.geoname where searchname = 'mont blanc' and country='FR';
select name,fclass,fcode,admin1,country,population from gazetteer.geoname where searchname = 'mont-blanc' and country='FR';
\q
drop index gazetteer.idx_alternatename_searchname;
UPDATE gazetteer.alternatename SET searchname = lower(replace(alternatename, ' ', '-'));
CREATE INDEX idx_alternatename_searchname ON gazetteer.alternatename (searchname);
\q
select * from spot.products where snowCover > 50;
\f spot.products
\s spot.products
