{"name":"Resto","tagline":"RESTo - REstful Semantic search Toolkit for geOspatial","body":"resto\r\n=====\r\n\r\nRESTo - REstful Semantic search Tool for geOspatial\r\n\r\nYou can try the [RESTo demo] (http://mapshup.info/resto)\r\n\r\nInstallation\r\n============\r\n\r\nIn the following, we suppose that $RESTO_HOME is the directory where resto sources will be installed\r\n\r\n        export RESTO_HOME=/wherever/you/want/resto\r\n\r\nIf not already done, download RESTo to $RESTO_HOME\r\n\r\n        git clone https://github.com/jjrom/resto.git $RESTO_HOME\r\n\r\nPrerequesites\r\n-------------\r\n\r\n* Apache (v2.0+) with **mod_rewrite support**\r\n* PHP (v5.3+) with **curl, XMLWriter and PGConnect extension**\r\n* PostgreSQL (v9.0+) with **hstore extension**\r\n* PostGIS (v1.5.1+)\r\n\r\nNote: RESTo could work with lower version of the specified requirements.\r\nHowever there is no guaranty of success and unwanted result may occured !\r\n\r\n\r\nInstall RESTo database\r\n----------------------\r\n\r\nRESTo installs a PostgreSQL database named 'resto'. \r\n\r\nThe 'resto' database is created with PostGIS and hstore extension enabled within the 'public' schema.\r\n\r\nDuring the installation, two additional schemas are created :\r\n* 'admin' schema - among others, it stores the table containing the collections description\r\n* 'gazetteer' schema - it contains the gazetteer table (see below)\r\n\r\nTwo users 'resto' and 'sresto' are automatically created within this database :\r\n* 'resto' user has READ ONLY access to collections database, to collection description and to gazetteer table\r\n* 'sresto' user has same privileges as 'resto' user plus WRITE access to 'admin' schema and to all collection databases\r\n\r\nIt is very important to specify strong passwords for these two users.\r\n\r\nTo install RESTo database, launch the following script\r\n\r\n        $RESTO_HOME/_install/installDB.sh -F -d <PostGIS directory> -p <resto user password> -P <sresto user password>\r\n\r\nNote1 : <PostGIS directory> should be replaced by the directory containing both postgis.sql and spatial_ref_sys.sql (e.g. /usr/local/share/postgis/)\r\n\r\nNote2 : installation script supposed that the PostgreSQL superuser name is 'postgres' (otherwise add '-s <superusername>' to the above command)\r\nand that it has access to psql on localhost without password.\r\n\r\n\r\nInstall Gazetteer\r\n-----------------\r\n\r\nRESTo provides a Gazetteer service based on geonames data (http://geonames.org). This service is optional but if \r\nyou want to add location based search on toponyms (and i'm sure you want :) you should follow the next steps.\r\n\r\nFirst you need to download geonames data in $GEONAMES_DIR directory\r\n\r\n        export GEONAMES_DIR=/a/temporary/directory\r\n        cd $GEONAMES_DIR\r\n        wget http://download.geonames.org/export/dump/allCountries.zip\r\n        wget http://download.geonames.org/export/dump/alternateNames.zip\r\n        wget http://download.geonames.org/export/dump/countryInfo.txt\r\n        wget http://download.geonames.org/export/dump/iso-languagecodes.txt\r\n        unzip allCountries.zip\r\n        unzip alternateNames.zip\r\n\r\nNext install the gazetteer within RESTo\r\n        \r\n        # \r\n        # Note : Read this if you are using Fedora, Red Hat Enterprise Linux, CentOS,\r\n        # Scientific Linux, or one of the other distros that enable SELinux by default.\r\n        #\r\n        # SELinux policies for PostgreSQL do not permit the server to read files outside\r\n        # the PostgreSQL data directory, or the file was created by a service covered by\r\n        # a targeted policy so it has a label that PostgreSQL isn't allowed to read from.\r\n        #\r\n        # To make the itagPopulateDB.sh, run the following command as root\r\n        #\r\n        #   setenforce 0\r\n        # \r\n        # Then after a successful itagPopulateDB.sh relaunch the command\r\n        #\r\n        #   setenforce 1\r\n        #\r\n        $RESTO_HOME/_install/Gazetteer/installGazetteerDB.sh -F -D $GEONAMES_DIR\r\n\r\nNote : gazetteer contains more than 9 000 000 of toponyms. Depending on your server performance, the above step can\r\ntake a long time (about one hour)\r\n\r\n\r\nInstall wikipedia data (Gazetteer module) - OPTIONAL\r\n----------------------------------------------------\r\n\r\nThis step is optional and can only be performed if you have the geolocated wikipedia data (which probably you don't have :)\r\nIn case of, these are the steps to follow in order to install this database within RESTo\r\n\r\nPut the geolocated wikipedia data in $GEONAMES_DIR/wikipedia directory, then run the command\r\n\r\n        $RESTO_HOME/_install/Gazetteer/installWikipediaDB.sh -D $GEONAMES_DIR/wikipedia\r\n\r\nDeploy application\r\n------------------\r\n\r\nLast step is to install application to the target directory. This directory will be accessed\r\nby the web server so it could be either directly under the DocumentRoot web server directory\r\nor in whatever directory accessed through web server Alias configuration. The latter case is prefered\r\n(see Apache configuration part below for Alias configuration)\r\n\r\nTo install RESTo launch the following script\r\n\r\n        # Note : RESTO_TARGET should not exist - it will be created by deploy.sh script\r\n        export RESTO_TARGET=/your/installation/directory\r\n        $RESTO_HOME/_install/deploy.sh -s $RESTO_HOME -t $RESTO_TARGET\r\n\r\n\r\nInstall iTag (optional)\r\n-----------------------\r\n\r\n[iTag] (http://github.com/jjrom/itag) is an application to automatically tag geospatial metadata\r\nwith geographical information (such as location, landuse, etc.)\r\n\r\nRESTo extensively use iTag during the ressource ingestion process. \r\n\r\nIf you want to use iTag with RESTo, you should install it (follow the [instructions] (http://github.com/jjrom/itag/)) or use\r\nthe [online version of iTag] (http://mapshup.info/itag/?) - see RESTo configuration below\r\n\r\n\r\nConfiguration\r\n=============\r\n\r\nApache Configuration\r\n--------------------\r\n\r\nThe first thing to do is to configure Apache (or wathever is your web server) to support URL rewriting.\r\n\r\nBasically, with URLs rewriting every request sent to RESTo application will end up to index.php. For example,\r\nhttp://localhost/resto/whatever/youwant/to/access will be rewrite as http://localhost/resto/index.php?RESToURL=/whatever/youwant/to/access\r\n\r\n\r\n### Check that mod_rewrite is installed\r\n\r\nFor instance on MacOS X, looks for something like this in /etc/apache2/httpd.conf\r\n\r\n        LoadModule rewrite_module libexec/apache2/mod_rewrite.so \r\n\r\n### Configure target directory\r\n\r\nSet an alias to the resto directory. To make mod_rewrite works, you need to verify that both 'FollowSymLinks'\r\nand 'AllowOverride All' are set in the apache directory configuration\r\n\r\nFor instance to access resto at http://localhost/resto (change \"/directory/to/resto\" by $RESTO_TARGET below):\r\n\r\n        Alias /resto/ \"/directory/to/resto\"\r\n        <Directory \"/directory/to/resto\">\r\n            Options FollowSymLinks\r\n            AllowOverride All\r\n            Order allow,deny\r\n            Allow from all\r\n        </Directory>\r\n\r\n### Check \"RewriteBase\" value within $RESTO_TARGET/.htaccess\r\n\r\nEdit this value so it matches your alias name. If you use the same alias as in 2. (i.e. '/resto/')\r\nthere is no need to edit $RESTO_TARGET/.htaccess file\r\n\r\n### Configure apache to support https (optional)\r\n\r\nRESTo can be accessed either in http or https. For security reason, https is prefered when\r\ndealing with authenticated request (e.g. creation of a collection, insertion of a resource in the collection, etc.)\r\n\r\nThus, turning https in apache is optional to make RESTo work.\r\n\r\nThis document does not explain how to turn https on - but your system administrator should know how to do it !\r\n\r\nNote: a step by step guide for installing https on Mac OS X is provided in the FAQ section below\r\n\r\n### Restart apache\r\n\r\n        apachectl restart\r\n\r\n\r\nPostgreSQL configuration\r\n------------------------\r\n\r\nNote: the following configuration is optional but it is safer from a security point of view to do it like this.\r\n\r\nEdit the PostgreSQL pg_hba.conf file and add the following rules :\r\n\r\n        # Configuration for RESTo framework\r\n        local  all     resto,sresto                                    password\r\n        host   resto   resto,sresto            127.0.0.1/32            md5\r\n        host   resto   resto,sresto            ::1/128                 md5\r\n\r\nEdit the PostreSQL postgresql.conf and be sure that postgres accept tcp_ip connection.\r\n\r\n        # Uncomment these two lines within postgesql.conf\r\n        listen_adresses = 'localhost'\r\n        port = 5432\r\n\r\nThen restart postgresql (e.g. \"pg_ctl restart\")\r\n\r\nNote : **Read the following if you are using Fedora, Red Hat Enterprise Linux, CentOS, Scientific Linux,\r\nor one of the other distros that enable SELinux by default**\r\n\r\n        # \r\n        #  Enable the specific permission to allow Apache to issue HTTP connections.\r\n        #\r\n        service httpd stop\r\n        service postgresql stop\r\n\r\n        setsebool -P httpd_can_network_connect 1\r\n\r\n        service httpd start\r\n        service postgresql start\r\n\r\nRESTo configuration\r\n-------------------\r\n\r\nAll configuration parameters are defined within $RESTO_TARGET/resto/resto.ini file\r\n\r\nThe configuration file is self explanatory. For a standard installation you should only check that :\r\n* **db.password** value is **the same as the 'resto' user password set during database installation**\r\n* **db.spassword** value is **the same as the 'sresto' user password set during database installation**\r\n* (optional) mapshup.url value is changed accordingly to your configuration.\r\nIf you do not want to see products on map comment this line.\r\n* (optional) ResourceManager.iTag value is changed accordingly to your configuration. If this line\r\nis commented, then iTag will not be used (i.e. products will not be tagged)\r\n\r\nCreate an admin user within the database\r\n        \r\n        # Change password !!!\r\n        $PASSWORD=nimda\r\n\r\n        psql -d resto << EOF\r\n        INSERT INTO admin.users (userid,groups,username,password,activationcode,activated,registrationdate) VALUES ('admin','admin','admin',md5('$PASSWORD'),md5('$PASSWORD' || now()), TRUE, now());\r\n        EOF\r\n\r\n\r\nmasphup configuration\r\n---------------------\r\n\r\nEdit $RESTO_TARGET/themes/default/config.js and set c[\"general\"].rootUrl value to $RESTO_TARGET url  \r\n\r\nQuick Start\r\n===========\r\n\r\nCreate a collection\r\n-------------------\r\n        \r\n        $RESTO_HOME/_scripts/createCollection.sh -f $RESTO_HOME/_examples/collections/Example.json -u admin:nimda\r\n\r\nAccess OpenSearch Description for a collection\r\n----------------------------------------------\r\nOnly works for an existing collection (so create a collection first !)\r\n\r\n        Open you browser to http://localhost/resto/Example/$describe\r\n\r\nDelete a collection\r\n-------------------\r\nWARNING ! This will also destroy all the resources within the collection\r\n\r\n        $RESTO_HOME/_scripts/deleteCollection.sh -p -c Example -u admin:nimda\r\n\r\nList all collections\r\n--------------------\r\n\r\n        Open your browser to http://localhost/resto/\r\n\r\nInsert a resource\r\n-----------------\r\nOnly works for an existing collection (so create a collection first !)\r\n\r\n        $RESTO_HOME/_scripts/postResource.sh -c Example -f $RESTO_HOME/_examples/resources/resource_Example.json -u admin:nimda\r\n\r\n\r\nSearch for resources\r\n--------------------\r\nOnly works for an existing collection (so create a collection first !)\r\n\r\n        Open your browser to http://localhost/resto/Example/\r\n\r\n\r\nSee resource metadata in Atom\r\n-----------------------------\r\nOnly works on an existing resource (so insert resource first !)\r\n\r\n        curl \"http://localhost/resto/Example/DS_SPOT6_201211101947221_FR1_FR1_FR1_FR1_W152S17_01809/?&format=atom\"\r\n\r\n\r\nSee resource metadata in GeoJSON\r\n--------------------------------\r\nOnly works on an existing resource (so insert resource first !)\r\n\r\n        curl \"http://localhost/resto/Example/DS_SPOT6_201211101947221_FR1_FR1_FR1_FR1_W152S17_01809/?&format=json\"\r\n\r\n\r\nTag a resource\r\n--------------\r\nOnly works for an existing resource\r\n\r\n        $RESTO_HOME/_scripts/tagResource.sh -c Example -f $RESTO_HOME/_examples/tags/tagging_Example.json -i DS_SPOT6_201211101947221_FR1_FR1_FR1_FR1_W152S17_01809 -u admin:nimda\r\n\r\nTag a collection\r\n----------------\r\nOnly works for an existing collection\r\n\r\n        $RESTO_HOME/_scripts/tagCollection.sh -c Example -f $RESTO_HOME/_examples/tags/tagging_Example.json -u admin:nimda\r\n\r\n\r\nFrequently Asked Questions\r\n==========================\r\n\r\nHow to configure Apache for https ?\r\n-----------------------------------\r\n\r\nFor [Mac OS X] (http://blog.andyhunt.info/2011/11/26/apache-ssl-on-max-osx-lion-10-7/)\r\n\r\n(Warning http://stackoverflow.com/questions/18251128/why-am-i-suddenly-getting-a-blocked-loading-mixed-active-content-issue-in-fire)\r\n\r\n\r\nFor security reasons i cannot POST file through PHP\r\n---------------------------------------------------\r\n\r\nYou can POST collections descriptions using a \"key=value\" mechanism instead of file upload.\r\n\r\nTo do so, you need to encode the json file (using javascript encodeURIComponent for instance) - see $RESTO_HOME/_examples/collections/Example.txt - and run the following command\r\n\r\n        curl -X POST -d @$RESTO_HOME/_examples/collections/Example.txt http://admin:nimda@localhost/resto/\r\n","google":"UA-1386506-9","note":"Don't delete this file! It's used internally to help with page regeneration."}